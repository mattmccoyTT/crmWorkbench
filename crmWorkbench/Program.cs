using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Xrm.Client;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Messages;
using System.Net;
using System.Runtime.Serialization;
using Xrm;

namespace crmWorkbench
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var xrm = new XrmServiceContext("Xrm"))
            {
                try
                {
                    //createConnectionsFromRelationships(xrm);
                    //deleteAutoGeneratedConnections(xrm);
                    //printConnections(xrm);
                    //createConnectionsFromTTReps(xrm);
                    //createConnectionsFromTTContracts(xrm);
                    //checkCountriesAccount(xrm);
                    //checkCountriesContact(xrm);
                    checkCountriesLead(xrm);

                    Console.WriteLine("Done!");
                    Console.ReadKey();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    Console.ReadKey();
                }
            }

        }

        private static void createConnectionsFromRelationships(XrmServiceContext xrm)
        {

            int count = 0;
            //grab all customer relationships and just the pertinent data
            //had to join the relationshipRoles in order to get the names
            var cusRel = (from c in xrm.CustomerRelationshipSet
                          join r in xrm.RelationshipRoleSet on c.CustomerRoleId.Id equals r.RelationshipRoleId
                          join r2 in xrm.RelationshipRoleSet on c.PartnerRoleId.Id equals r2.RelationshipRoleId
                          select new
                          {
                              CustomerName = c.account_customer_relationship_customer,
                              CustomerId = c.CustomerId,
                              Role1 = r.Name,
                              Role2 = r2.Name,
                              PartnerId = c.PartnerId

                          });

            foreach (var relationship in cusRel)
            {
                bool connecExists = false;
                ConnectionRole Record1RoleIdRef = new ConnectionRole();
                ConnectionRole Record2RoleIdRef = new ConnectionRole();


                foreach (var connectionRole in xrm.ConnectionRoleSet)
                {
                    if ((relationship.Role2 == "Broker") && (connectionRole.Name == "Non TT Broker"))
                    {
                        Record1RoleIdRef = connectionRole;
                        break;
                    }
                    else if ((relationship.Role2 == "ASP") && (connectionRole.Name == "Hosted By"))
                    {
                        Record1RoleIdRef = connectionRole;
                        break;
                    }
                    else if (connectionRole.Name == relationship.Role2)
                    {
                        Record1RoleIdRef = connectionRole;
                        break;
                    }
                }
                foreach (var connectionRole in xrm.ConnectionRoleSet)
                {
                    if ((relationship.Role1 == "Broker") && (connectionRole.Name == "Non TT Broker"))
                    {
                        Record2RoleIdRef = connectionRole;
                        break;
                    }
                    else if ((relationship.Role1 == "ASP") && (connectionRole.Name == "Hosted By"))
                    {
                        Record2RoleIdRef = connectionRole;
                        break;
                    }
                    else if (connectionRole.Name == relationship.Role1)
                    {
                        Record2RoleIdRef = connectionRole;
                        break;
                    }
                }

                Connection newConnection = new Connection
                {
                    Record1Id = relationship.CustomerId,
                    Record1RoleId = new EntityReference(ConnectionRole.EntityLogicalName, Record1RoleIdRef.Id),
                    Record2RoleId = new EntityReference(ConnectionRole.EntityLogicalName, Record2RoleIdRef.Id),
                    Record2Id = relationship.PartnerId,
                    Description = "Auto-generated by relationship creation."
                };

                connecExists = findDuplicate(xrm, newConnection);

                if (connecExists)
                    Console.WriteLine("newConnection exists already, not creating.");
                else
                {
                    try
                    {
                        xrm.Create(newConnection);
                    }
                    catch (Exception ex)
                    {
                        string logFile = @"C:\TEMP\crmlogs\errorLog" + count + ".txt";
                        string logInfo = ex.Message + "\n" +
                            "Customer ID:  " + relationship.CustomerId.Id.ToString() + "\n" +
                            "Customer Role:" + Record1RoleIdRef.Name + "\n" +
                            "Partner Role: " + Record2RoleIdRef.Name + "\n" +
                            "Partner ID:   " + relationship.PartnerId.Id.ToString() + "\n";
                        System.IO.File.WriteAllText(logFile, logInfo);
                    }
                    count++;
                    Console.WriteLine(count);
                }
            }
        }

        private static void createConnectionsFromTTReps(XrmServiceContext xrm)
        {
            Dictionary<int, string> types = new Dictionary<int, string>()
	        {
                {1,"Primary Salesperson"},
                {2,"Secondary Salesperson"},
                {8,"Relationship Manager"},
                {3,"Primary Account Manager"},
                {6,"Secondary Account Manager"},
                {4,"Primary Technical Manager"},
                {5,"Secondary Technical Manager"},
                {9,"Tech Sales Lead"},
                {15,"Tech Sales Backup"},
                {14,"Tech Sales Asian Resource"},
                {11,"Primary API Integration Mgr"},
                {12,"Secondary API Integration Mgr"}
            };

            var ttreps = (from tau in xrm.Tt_AccountUserSet
                          select new
                          {
                              ttAccount = tau.tt_accountid,
                              ttUser = tau.OwnerId,
                              type = tau.Tt_Type,
                              minConFreq = tau.TT_ContactFrequency,
                              globalLead = tau.TT_GlobalLead
                          });

            ConnectionRole Record2RoleIdRef = new ConnectionRole();
            bool connecExists = false;
            string roleName = null;
            int count = 0;

            foreach (var rep in ttreps)
            {
                if (types.TryGetValue(rep.type.Value, out roleName))
                {
                    foreach (ConnectionRole role in xrm.ConnectionRoleSet)
                    {
                        if (role.Name.ToString() == roleName)
                        {
                            Record2RoleIdRef = role;
                            break;
                        }
                    }
                }

                Connection newConnection = new Connection
                {
                    Record1Id = rep.ttAccount,
                    Record2Id = rep.ttUser,
                    Record2RoleId = new EntityReference(ConnectionRole.EntityLogicalName, Record2RoleIdRef.Id),
                    tt_mincontactfreq = (rep.minConFreq + 100000000), //account for differences in the values on the option set for custom entites and OOB entites
                    tt_globallead = rep.globalLead,
                    Description = "Auto-generated by TT Rep creation."
                };

                connecExists = findDuplicate(xrm, newConnection);

                if (connecExists)
                {
                    Console.WriteLine("newConnection exists already, not creating." + " " + count);
                    count++;
                }
                else
                {
                    try
                    {
                        xrm.Create(newConnection);
                    }
                    catch (Exception ex)
                    {
                        string logFile = @"C:\TEMP\crmlogs\errorLog" + count + ".txt";
                        string logInfo = ex.Message + "\n" +
                            "Account:     " + rep.ttAccount.Id.ToString() + "\n" +
                            "Rep Type:    " + Record2RoleIdRef.Name + "\n" +
                            "TT User:     " + rep.ttUser.Id.ToString() + "\n" +
                            "Min Con Freq:" + rep.minConFreq + "\n";
                        System.IO.File.WriteAllText(logFile, logInfo);
                    }
                    count++;
                    Console.WriteLine(count);
                }



            }
        }

        private static void createConnectionsFromTTContracts(XrmServiceContext xrm)
        {
            var tt_contracts = (from c in xrm.tt_account_tt_ttcontractsSet
                                join a in xrm.AccountSet on c.accountid equals a.AccountId
                                join con in xrm.Tt_TTContractsSet on c.tt_ttcontractsid equals con.Id
                                select new
                                {
                                    Account = (Guid)a.AccountId,
                                    Contract = (Guid)c.tt_ttcontractsid
                                });

            ConnectionRole hasContract = new ConnectionRole();
            foreach (ConnectionRole connec in xrm.ConnectionRoleSet)
            {
                if (connec.Name.ToString() == "has contract")
                {
                    hasContract = connec;
                    break;
                }
            }

            int count = 0;

            foreach (var tt_con in tt_contracts)
            {

                Connection newConnec = new Connection
                {
                    Record1Id = new EntityReference(Account.EntityLogicalName, tt_con.Account),
                    Record1RoleId = new EntityReference(ConnectionRole.EntityLogicalName, hasContract.Id),
                    Record2RoleId = new EntityReference(ConnectionRole.EntityLogicalName, hasContract.Id),
                    Record2Id = new EntityReference(Tt_TTContracts.EntityLogicalName, tt_con.Contract),
                    Description = "Auto-generated."
                };

                bool connecExists = true;

                connecExists = findDuplicate(xrm, newConnec);
                count++;

                if (connecExists)
                    Console.WriteLine("newConnection exists already, not creating." + " " + count + "\n");
                else
                {
                    try
                    {
                        xrm.Create(newConnec);
                    }
                    catch (Exception ex)
                    {
                        string logFile = @"C:\TEMP\crmlogs\errorLog" + count + ".txt";
                        string logInfo = ex.Message + "\n" +
                            "Customer ID:  " + tt_con.Account.ToString() + "\n" +
                            "Partner ID:   " + tt_con.Contract.ToString() + "\n";
                        System.IO.File.WriteAllText(logFile, logInfo);
                    }
                    Console.WriteLine(count);
                }
            }











        }

        private static void deleteAutoGeneratedConnections(XrmServiceContext xrm)
        {
            foreach (var connec in xrm.ConnectionSet)
            {
                if ((connec.Description == "Auto-generated by TT Rep creation.") && (connec.IsMaster == true))
                {
                    try
                    {
                        Guid connecGuid = connec.Id;
                        xrm.Delete(connec.LogicalName, connec.Id);
                        Console.WriteLine(connecGuid.ToString() + " deleted.");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

            }
        }

        private static void printConnections(XrmServiceContext xrm)
        {
            foreach (Connection print in xrm.ConnectionSet)
            {
                Console.WriteLine("Customer ID:  " + print.Record1Id.Name);
                // Console.WriteLine("Customer Role:" + print.Record1RoleId.Name);
                //Console.WriteLine("Partner Role: " + print.Record2RoleId.Name);
                Console.WriteLine("Partner ID:   " + print.Record2Id.Name + '\n');
            }
        }

        private static void printConnection(Connection print)
        {
            Console.WriteLine("Customer ID:  " + print.Record1Id.Name);
            // Console.WriteLine("Customer Role:" + print.Record1RoleId.Name);
            //Console.WriteLine("Partner Role: " + print.Record2RoleId.Name);
            Console.WriteLine("Partner ID:   " + print.Record2Id.Name + '\n');
        }

        private static bool findDuplicate(XrmServiceContext xrm, Connection newConnection)
        {
            try
            {
                QueryExpression query = new QueryExpression
                {
                    EntityName = "connection",
                    ColumnSet = new ColumnSet("record1id", "record2roleid", "record2id"),
                    Criteria = new FilterExpression
                    {
                        FilterOperator = LogicalOperator.And,
                        Conditions = 
                            {
                                new ConditionExpression
                                {
                                    AttributeName = "record1id",
                                    Operator = ConditionOperator.Equal,
                                    Values = {newConnection.Record1Id.Id}
                                },
                                //new ConditionExpression
                                //{
                                //    AttributeName = "record1roleid",
                                //    Operator = ConditionOperator.Equal,
                                //    Values =  {newConnection.Record1RoleId.Id}
                                //},
                                new ConditionExpression
                                {
                                    AttributeName = "record2roleid",
                                    Operator = ConditionOperator.Equal,
                                    Values =  {newConnection.Record2RoleId.Id}
                                },
                                new ConditionExpression
                                {
                                    AttributeName = "record2id",
                                    Operator = ConditionOperator.Equal,
                                    Values = {newConnection.Record2Id.Id}
                                }
                            }
                    }
                };

                EntityCollection results = xrm.RetrieveMultiple(query);

                if (results.Entities.Count > 0)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return true;
            }
        }

        private static void checkCountriesAccount(XrmServiceContext xrm)
        {
            try
            {
                int count = 0;
                int no_cunt = 0;
                foreach (Account con in xrm.AccountSet)
                {
                    if ((con.Address1_Country != null) && (con.Address1_Country != ""))
                    {
                        bool found = false;
                        if ((con.Address1_Country.ToLower() == "united states of america")
                            || (con.Address1_Country.ToLower() == "us")
                            || (con.Address1_Country.ToLower() == "united states")
                            || (con.Address1_Country.ToLower() == "u of a")
                            || (con.Address1_Country.ToLower() == "us of a")
                            || (con.Address1_Country.ToLower() == "america")
                            || (con.Address1_Country.ToLower() == "u")
                            || (con.Address1_Country.ToLower() == "u.s.a")
                            || (con.Address1_Country.ToLower() == "u.s.a."))
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "accountid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.AccountId.Value, attributes);
                            updateContact["address1_country"] = "USA";
                            xrm.Update(updateContact);
                        }

                        if (//(con.Address1_Country.ToLower() == "united kingdom")
                             (con.Address1_Country.ToLower() == "england")
                            || (con.Address1_Country.ToLower() == "uk"))
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "accountid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.AccountId.Value, attributes);
                            updateContact["address1_country"] = "United Kingdom";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "russia")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "accountid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.AccountId.Value, attributes);
                            updateContact["address1_country"] = "Russian Federation";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "sing")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "accountid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.AccountId.Value, attributes);
                            updateContact["address1_country"] = "Singapore";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "korea")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "accountid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.AccountId.Value, attributes);
                            updateContact["address1_country"] = "South Korea";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "brasil")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "accountid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.AccountId.Value, attributes);
                            updateContact["address1_country"] = "Brazil";
                            xrm.Update(updateContact);
                        }

                        if (!found)
                        {
                            foreach (Tt_Country country in xrm.Tt_CountrySet)
                            {
                                if (con.Address1_Country.Length > 2)
                                {
                                    if (country.Tt_name.ToLower() == con.Address1_Country.ToLower())
                                    {
                                        Console.WriteLine("Account " + con.Name + " looks pretty good, yea. \n");
                                        found = true;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (country.Tt_TwoLetterCountryCode == con.Address1_Country.ToUpper())
                                    {
                                        found = true;
                                        ColumnSet attributes = new ColumnSet(new string[] { "accountid", "address1_country" });
                                        Entity updateContact = xrm.Retrieve(con.LogicalName, con.AccountId.Value, attributes);
                                        updateContact["address1_country"] = country.Tt_name;
                                        xrm.Update(updateContact);
                                    }
                                }
                            }
                        }
                        if (!found)
                        {
                            Console.WriteLine("Account " + con.Name + " has country of " + con.Address1_Country + " which does not match anything in CRM. Please fix. \n");
                            count++;
                        }
                    }
                    else
                    {
                        //Console.WriteLine("There is no country.\n");
                        no_cunt++;
                    }
                }
                Console.WriteLine(count.ToString() + " number of contacts have fucked up countries! Have fun! \n And " + no_cunt.ToString() + " don't have a country at all.");
            }
            catch (Exception ex)
            {
            }
        }

        private static void checkCountriesContact(XrmServiceContext xrm)
        {
            try
            {
                int count = 0;
                int no_cunt = 0;
                foreach (Contact con in xrm.ContactSet)
                {
                    if ((con.Address1_Country != null) && (con.Address1_Country != ""))
                    {
                        bool found = false;
                        if ((con.Address1_Country.ToLower() == "united states of america")
                            || (con.Address1_Country.ToLower() == "us")
                            || (con.Address1_Country.ToLower() == "united states")
                            || (con.Address1_Country.ToLower() == "u of a")
                            || (con.Address1_Country.ToLower() == "us of a")
                            || (con.Address1_Country.ToLower() == "america")
                            || (con.Address1_Country.ToLower() == "u")
                            || (con.Address1_Country.ToLower() == "u.s.a")
                            || (con.Address1_Country.ToLower() == "u.s.a."))
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "contactid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.ContactId.Value, attributes);
                            updateContact["address1_country"] = "USA";
                            xrm.Update(updateContact);
                        }

                        if (//(con.Address1_Country.ToLower() == "united kingdom")
                             (con.Address1_Country.ToLower() == "england")
                            || (con.Address1_Country.ToLower() == "uk"))
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "contactid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.ContactId.Value, attributes);
                            updateContact["address1_country"] = "United Kingdom";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "russia")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "contactid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.ContactId.Value, attributes);
                            updateContact["address1_country"] = "Russian Federation";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "sing")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "contactid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.ContactId.Value, attributes);
                            updateContact["address1_country"] = "Singapore";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "korea")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "contactid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.ContactId.Value, attributes);
                            updateContact["address1_country"] = "South Korea";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "brasil")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "contactid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.ContactId.Value, attributes);
                            updateContact["address1_country"] = "Brazil";
                            xrm.Update(updateContact);
                        }

                        if (!found)
                        {
                            foreach (Tt_Country country in xrm.Tt_CountrySet)
                            {
                                if (con.Address1_Country.Length > 2)
                                {
                                    if (country.Tt_name.ToLower() == con.Address1_Country.ToLower())
                                    {
                                        Console.WriteLine("Account " + con.FullName + " looks pretty good, yea. \n");
                                        found = true;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (country.Tt_TwoLetterCountryCode == con.Address1_Country.ToUpper())
                                    {
                                        found = true;
                                        ColumnSet attributes = new ColumnSet(new string[] { "contactid", "address1_country" });
                                        Entity updateContact = xrm.Retrieve(con.LogicalName, con.ContactId.Value, attributes);
                                        updateContact["address1_country"] = country.Tt_name;
                                        xrm.Update(updateContact);
                                    }
                                }
                            }
                        }
                        if (!found)
                        {

                            //    Console.WriteLine("Account " + con.FullName + " has country of " + con.Address1_Country + " which does not match anything in CRM. Please fix. \n");
                            //    count++;
                            //    string contactURL = "http://crmtest/tradingtechnologies
                            //    string logFile = @"C:\TEMP\crmlogs\errorLogContacts.txt";
                            //    string logInfo = 
                            //    System.IO.File.WriteAllText(logFile, logInfo);
                        }

                    }
                    else
                    {
                        //Console.WriteLine("There is no country.\n");
                        no_cunt++;
                    }
                }
                Console.WriteLine(count.ToString() + " number of contacts have fucked up countries! Have fun! \n And " + no_cunt.ToString() + " don't have a country at all.");
            }
            catch (Exception ex)
            {
            }
        }

        private static void checkCountriesLead(XrmServiceContext xrm)
        {
            try
            {
                int count = 0;
                int no_cunt = 0;
                foreach (Lead con in xrm.LeadSet)
                {
                    if ((con.Address1_Country != null) && (con.Address1_Country != ""))
                    {
                        bool found = false;
                        if ((con.Address1_Country.ToLower() == "united states of america")
                            || (con.Address1_Country.ToLower() == "us")
                            || (con.Address1_Country.ToLower() == "united states")
                            || (con.Address1_Country.ToLower() == "u of a")
                            || (con.Address1_Country.ToLower() == "us of a")
                            || (con.Address1_Country.ToLower() == "america")
                            || (con.Address1_Country.ToLower() == "u")
                            || (con.Address1_Country.ToLower() == "u.s.a")
                            || (con.Address1_Country.ToLower() == "u.s.a."))
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "leadid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.LeadId.Value, attributes);
                            updateContact["address1_country"] = "USA";
                            xrm.Update(updateContact);
                        }

                        if (//(con.Address1_Country.ToLower() == "united kingdom")
                             (con.Address1_Country.ToLower() == "england")
                            || (con.Address1_Country.ToLower() == "uk"))
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "leadid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.LeadId.Value, attributes);
                            updateContact["address1_country"] = "United Kingdom";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "russia")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "leadid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.LeadId.Value, attributes);
                            updateContact["address1_country"] = "Russian Federation";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "sing")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "leadid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.LeadId.Value, attributes);
                            updateContact["address1_country"] = "Singapore";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "korea")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "leadid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.LeadId.Value, attributes);
                            updateContact["address1_country"] = "South Korea";
                            xrm.Update(updateContact);
                        }

                        if (con.Address1_Country.ToLower() == "brasil")
                        {
                            found = true;
                            ColumnSet attributes = new ColumnSet(new string[] { "leadid", "address1_country" });
                            Entity updateContact = xrm.Retrieve(con.LogicalName, con.LeadId.Value, attributes);
                            updateContact["address1_country"] = "Brazil";
                            xrm.Update(updateContact);
                        }

                        if (!found)
                        {
                            foreach (Tt_Country country in xrm.Tt_CountrySet)
                            {
                                if (con.Address1_Country.Length > 2)
                                {
                                    if (country.Tt_name.ToLower() == con.Address1_Country.ToLower())
                                    {
                                        Console.WriteLine("Lead " + con.FullName + " looks pretty good, yea. \n");
                                        found = true;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (country.Tt_TwoLetterCountryCode == con.Address1_Country.ToUpper())
                                    {
                                        found = true;
                                        ColumnSet attributes = new ColumnSet(new string[] { "leadid", "address1_country" });
                                        Entity updateContact = xrm.Retrieve(con.LogicalName, con.LeadId.Value, attributes);
                                        updateContact["address1_country"] = country.Tt_name;
                                        xrm.Update(updateContact);
                                    }
                                }
                            }
                        }
                        if (!found)
                        {

                            Console.WriteLine("Lead " + con.FullName + " has country of " + con.Address1_Country + " which does not match anything in CRM. Please fix. \n");
                            count++;
                        }
                    }
                    else
                    {
                        //Console.WriteLine("There is no country.\n");
                        no_cunt++;
                    }
                }
                Console.WriteLine(count.ToString() + " number of leads have fucked up countries! Have fun! \n And " + no_cunt.ToString() + " don't have a country at all.");
            }
            catch (Exception ex)
            {
            }
        }

        private static void updateCountry(XrmServiceContext xrm)
        {

        }

    }
}
